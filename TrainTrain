import pandas as pd
import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Load data
data = pd.read_csv('DataTrain_With_Accidents.csv')

# Features and target
X = data[['AccX', 'AccY', 'AccZ', 'GyroX', 'GyroY', 'GyroZ', 'Pitch', 'Roll', 'Yaw']]
y = data['Accident']

# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Convert to tensors
X_train = torch.tensor(X_train, dtype=torch.float32)
X_test = torch.tensor(X_test, dtype=torch.float32)
y_train = torch.tensor(y_train.values, dtype=torch.float32).view(-1, 1)
y_test = torch.tensor(y_test.values, dtype=torch.float32).view(-1, 1)

# Define the model
class PINNStuff(nn.Module):
    def __init__(self, input_dim):
        super(PINNStuff, self).__init__()
        self.fc1 = nn.Linear(input_dim, 128)
        self.dropout1 = nn.Dropout(0.5)
        self.fc2 = nn.Linear(128, 128)
        self.dropout2 = nn.Dropout(0.5)
        self.fc3 = nn.Linear(128, 64)
        self.fc4 = nn.Linear(64, 64)
        self.fc5 = nn.Linear(64, 1)
        
    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = self.dropout1(x)
        x = torch.relu(self.fc2(x))
        x = self.dropout2(x)
        x = torch.relu(self.fc3(x))
        x = torch.relu(self.fc4(x))
        x = torch.sigmoid(self.fc5(x))
        return x

# Define the loss functions
def standard_loss(y_true, y_pred):
    criterion = nn.BCELoss()
    return criterion(y_pred, y_true)

def physics_loss(X, y_pred, mass=1.0):
    acc_x, acc_y, acc_z = X[:, 0], X[:, 1], X[:, 2]
    force_x = acc_x * mass
    force_y = acc_y * mass
    force_z = acc_z * mass
    physics_loss = torch.mean((force_x - force_y)**2 + (force_y - force_z)**2 + (force_z - force_x)**2)
    return physics_loss

# Initialize the model
input_dim = X_train.shape[1]
model = PINNStuff(input_dim)

# Training parameters
learning_rate = 0.0001
num_epochs = 200
batch_size = 32

# Create DataLoader for training data
train_dataset = torch.utils.data.TensorDataset(X_train, y_train)
train_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)

# Define optimizer
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

# Training loop with accuracy tracking and storing actual vs. predicted values
accuracies = []
actuals = []
predictions = []

for epoch in range(num_epochs):
    model.train()
    for X_batch, y_batch in train_loader:
        outputs = model(X_batch)
        
        bce_loss = standard_loss(y_batch, outputs)
        phys_loss = physics_loss(X_batch, outputs)
        total_loss = bce_loss + phys_loss
        
        optimizer.zero_grad()
        total_loss.backward()
        optimizer.step()
    
    # Evaluate the model on the test set
    model.eval()
    with torch.no_grad():
        y_pred = model(X_test)
        y_pred_class = (y_pred > 0.5).float()
        accuracy = (y_pred_class == y_test).sum().item() / y_test.size(0)
        accuracies.append(accuracy)
        
        actuals.append(y_test.numpy())
        predictions.append(y_pred.numpy())
    
    if (epoch+1) % 10 == 0:
        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {total_loss.item():.4f}, Accuracy: {accuracy:.4f}')

# Plotting accuracy over epochs
plt.figure(figsize=(12, 6))

# Plot accuracy
plt.subplot(1, 2, 1)
plt.plot(range(1, num_epochs + 1), accuracies, label='Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Model Accuracy over Epochs')
plt.legend()
plt.grid(True)

# Plot actual vs predicted values
plt.subplot(1, 2, 2)
plt.plot(range(len(actuals[-1])), actuals[-1], label='Actual', alpha=0.7)
plt.plot(range(len(predictions[-1])), predictions[-1], label='Predicted', alpha=0.7)
plt.xlabel('Sample')
plt.ylabel('Accident')
plt.title('Actual vs Predicted Values')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()

# Final test accuracy
print(f'Final Test Accuracy: {accuracies[-1]:.4f}')

# Save the trained model
torch.save(model.state_dict(), 'trained_model.pth')
